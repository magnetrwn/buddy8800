#ifndef UTIL_HPP_
#define UTIL_HPP_

#include "typedef.hpp"

/**
 * @brief Contains utility functions for the emulator.
 *
 * This class contains various static methods that are used throughout the emulator to provide
 * useful information and overall shorten the code.
 */
class util {
public:
    /// @brief Get the parity of an integer type value.
    /// @note This is an alternative if __builtin_parity is not available.
    template <typename T>
    static bool get_parity(T value) {
        usize p = 0;
        for (usize i = 0; i < 8 * sizeof(T); ++i)
            p += (value >> i) & 1;
        return p & 1;
    }

    /// @brief Get the disassembled name of an opcode.
    /// @warning Generated by AI, may be incorrect.
    template <u8 opcode>
    static constexpr const char* get_opcode_str() {
        if constexpr      (opcode == 0x00) { return "NOP"; }
        else if constexpr (opcode == 0x01) { return "LXI B, D16"; }
        else if constexpr (opcode == 0x02) { return "STAX B"; }
        else if constexpr (opcode == 0x03) { return "INX B"; }
        else if constexpr (opcode == 0x04) { return "INR B"; }
        else if constexpr (opcode == 0x05) { return "DCR B"; }
        else if constexpr (opcode == 0x06) { return "MVI B, D8"; }
        else if constexpr (opcode == 0x07) { return "RLC"; }
        else if constexpr (opcode == 0x09) { return "DAD B"; }
        else if constexpr (opcode == 0x0A) { return "LDAX B"; }
        else if constexpr (opcode == 0x0B) { return "DCX B"; }
        else if constexpr (opcode == 0x0C) { return "INR C"; }
        else if constexpr (opcode == 0x0D) { return "DCR C"; }
        else if constexpr (opcode == 0x0E) { return "MVI C, D8"; }
        else if constexpr (opcode == 0x0F) { return "RRC"; }
        else if constexpr (opcode == 0x11) { return "LXI D, D16"; }
        else if constexpr (opcode == 0x12) { return "STAX D"; }
        else if constexpr (opcode == 0x13) { return "INX D"; }
        else if constexpr (opcode == 0x14) { return "INR D"; }
        else if constexpr (opcode == 0x15) { return "DCR D"; }
        else if constexpr (opcode == 0x16) { return "MVI D, D8"; }
        else if constexpr (opcode == 0x17) { return "RAL"; }
        else if constexpr (opcode == 0x19) { return "DAD D"; }
        else if constexpr (opcode == 0x1A) { return "LDAX D"; }
        else if constexpr (opcode == 0x1B) { return "DCX D"; }
        else if constexpr (opcode == 0x1C) { return "INR E"; }
        else if constexpr (opcode == 0x1D) { return "DCR E"; }
        else if constexpr (opcode == 0x1E) { return "MVI E, D8"; }
        else if constexpr (opcode == 0x1F) { return "RAR"; }
        else if constexpr (opcode == 0x21) { return "LXI H, D16"; }
        else if constexpr (opcode == 0x22) { return "SHLD adr"; }
        else if constexpr (opcode == 0x23) { return "INX H"; }
        else if constexpr (opcode == 0x24) { return "INR H"; }
        else if constexpr (opcode == 0x25) { return "DCR H"; }
        else if constexpr (opcode == 0x26) { return "MVI H, D8"; }
        else if constexpr (opcode == 0x27) { return "DAA"; }
        else if constexpr (opcode == 0x29) { return "DAD H"; }
        else if constexpr (opcode == 0x2A) { return "LHLD adr"; }
        else if constexpr (opcode == 0x2B) { return "DCX H"; }
        else if constexpr (opcode == 0x2C) { return "INR L"; }
        else if constexpr (opcode == 0x2D) { return "DCR L"; }
        else if constexpr (opcode == 0x2E) { return "MVI L, D8"; }
        else if constexpr (opcode == 0x2F) { return "CMA"; }
        else if constexpr (opcode == 0x31) { return "LXI SP, D16"; }
        else if constexpr (opcode == 0x32) { return "STA adr"; }
        else if constexpr (opcode == 0x33) { return "INX SP"; }
        else if constexpr (opcode == 0x34) { return "INR M"; }
        else if constexpr (opcode == 0x35) { return "DCR M"; }
        else if constexpr (opcode == 0x36) { return "MVI M, D8"; }
        else if constexpr (opcode == 0x37) { return "STC"; }
        else if constexpr (opcode == 0x39) { return "DAD SP"; }
        else if constexpr (opcode == 0x3A) { return "LDA adr"; }
        else if constexpr (opcode == 0x3B) { return "DCX SP"; }
        else if constexpr (opcode == 0x3C) { return "INR A"; }
        else if constexpr (opcode == 0x3D) { return "DCR A"; }
        else if constexpr (opcode == 0x3E) { return "MVI A, D8"; }
        else if constexpr (opcode == 0x3F) { return "CMC"; }
        else if constexpr (opcode == 0x40) { return "MOV B, B"; }
        else if constexpr (opcode == 0x41) { return "MOV B, C"; }
        else if constexpr (opcode == 0x42) { return "MOV B, D"; }
        else if constexpr (opcode == 0x43) { return "MOV B, E"; }
        else if constexpr (opcode == 0x44) { return "MOV B, H"; }
        else if constexpr (opcode == 0x45) { return "MOV B, L"; }
        else if constexpr (opcode == 0x46) { return "MOV B, M"; }
        else if constexpr (opcode == 0x47) { return "MOV B, A"; }
        else if constexpr (opcode == 0x48) { return "MOV C, B"; }
        else if constexpr (opcode == 0x49) { return "MOV C, C"; }
        else if constexpr (opcode == 0x4A) { return "MOV C, D"; }
        else if constexpr (opcode == 0x4B) { return "MOV C, E"; }
        else if constexpr (opcode == 0x4C) { return "MOV C, H"; }
        else if constexpr (opcode == 0x4D) { return "MOV C, L"; }
        else if constexpr (opcode == 0x4E) { return "MOV C, M"; }
        else if constexpr (opcode == 0x4F) { return "MOV C, A"; }
        else if constexpr (opcode == 0x50) { return "MOV D, B"; }
        else if constexpr (opcode == 0x51) { return "MOV D, C"; }
        else if constexpr (opcode == 0x52) { return "MOV D, D"; }
        else if constexpr (opcode == 0x53) { return "MOV D, E"; }
        else if constexpr (opcode == 0x54) { return "MOV D, H"; }
        else if constexpr (opcode == 0x55) { return "MOV D, L"; }
        else if constexpr (opcode == 0x56) { return "MOV D, M"; }
        else if constexpr (opcode == 0x57) { return "MOV D, A"; }
        else if constexpr (opcode == 0x58) { return "MOV E, B"; }
        else if constexpr (opcode == 0x59) { return "MOV E, C"; }
        else if constexpr (opcode == 0x5A) { return "MOV E, D"; }
        else if constexpr (opcode == 0x5B) { return "MOV E, E"; }
        else if constexpr (opcode == 0x5C) { return "MOV E, H"; }
        else if constexpr (opcode == 0x5D) { return "MOV E, L"; }
        else if constexpr (opcode == 0x5E) { return "MOV E, M"; }
        else if constexpr (opcode == 0x5F) { return "MOV E, A"; }
        else if constexpr (opcode == 0x60) { return "MOV H, B"; }
        else if constexpr (opcode == 0x61) { return "MOV H, C"; }
        else if constexpr (opcode == 0x62) { return "MOV H, D"; }
        else if constexpr (opcode == 0x63) { return "MOV H, E"; }
        else if constexpr (opcode == 0x64) { return "MOV H, H"; }
        else if constexpr (opcode == 0x65) { return "MOV H, L"; }
        else if constexpr (opcode == 0x66) { return "MOV H, M"; }
        else if constexpr (opcode == 0x67) { return "MOV H, A"; }
        else if constexpr (opcode == 0x68) { return "MOV L, B"; }
        else if constexpr (opcode == 0x69) { return "MOV L, C"; }
        else if constexpr (opcode == 0x6A) { return "MOV L, D"; }
        else if constexpr (opcode == 0x6B) { return "MOV L, E"; }
        else if constexpr (opcode == 0x6C) { return "MOV L, H"; }
        else if constexpr (opcode == 0x6D) { return "MOV L, L"; }
        else if constexpr (opcode == 0x6E) { return "MOV L, M"; }
        else if constexpr (opcode == 0x6F) { return "MOV L, A"; }
        else if constexpr (opcode == 0x70) { return "MOV M, B"; }
        else if constexpr (opcode == 0x71) { return "MOV M, C"; }
        else if constexpr (opcode == 0x72) { return "MOV M, D"; }
        else if constexpr (opcode == 0x73) { return "MOV M, E"; }
        else if constexpr (opcode == 0x74) { return "MOV M, H"; }
        else if constexpr (opcode == 0x75) { return "MOV M, L"; }
        else if constexpr (opcode == 0x76) { return "HLT"; }
        else if constexpr (opcode == 0x77) { return "MOV M, A"; }
        else if constexpr (opcode == 0x78) { return "MOV A, B"; }
        else if constexpr (opcode == 0x79) { return "MOV A, C"; }
        else if constexpr (opcode == 0x7A) { return "MOV A, D"; }
        else if constexpr (opcode == 0x7B) { return "MOV A, E"; }
        else if constexpr (opcode == 0x7C) { return "MOV A, H"; }
        else if constexpr (opcode == 0x7D) { return "MOV A, L"; }
        else if constexpr (opcode == 0x7E) { return "MOV A, M"; }
        else if constexpr (opcode == 0x7F) { return "MOV A, A"; }
        else if constexpr (opcode == 0x80) { return "ADD B"; }
        else if constexpr (opcode == 0x81) { return "ADD C"; }
        else if constexpr (opcode == 0x82) { return "ADD D"; }
        else if constexpr (opcode == 0x83) { return "ADD E"; }
        else if constexpr (opcode == 0x84) { return "ADD H"; }
        else if constexpr (opcode == 0x85) { return "ADD L"; }
        else if constexpr (opcode == 0x86) { return "ADD M"; }
        else if constexpr (opcode == 0x87) { return "ADD A"; }
        else if constexpr (opcode == 0x88) { return "ADC B"; }
        else if constexpr (opcode == 0x89) { return "ADC C"; }
        else if constexpr (opcode == 0x8A) { return "ADC D"; }
        else if constexpr (opcode == 0x8B) { return "ADC E"; }
        else if constexpr (opcode == 0x8C) { return "ADC H"; }
        else if constexpr (opcode == 0x8D) { return "ADC L"; }
        else if constexpr (opcode == 0x8E) { return "ADC M"; }
        else if constexpr (opcode == 0x8F) { return "ADC A"; }
        else if constexpr (opcode == 0x90) { return "SUB B"; }
        else if constexpr (opcode == 0x91) { return "SUB C"; }
        else if constexpr (opcode == 0x92) { return "SUB D"; }
        else if constexpr (opcode == 0x93) { return "SUB E"; }
        else if constexpr (opcode == 0x94) { return "SUB H"; }
        else if constexpr (opcode == 0x95) { return "SUB L"; }
        else if constexpr (opcode == 0x96) { return "SUB M"; }
        else if constexpr (opcode == 0x97) { return "SUB A"; }
        else if constexpr (opcode == 0x98) { return "SBB B"; }
        else if constexpr (opcode == 0x99) { return "SBB C"; }
        else if constexpr (opcode == 0x9A) { return "SBB D"; }
        else if constexpr (opcode == 0x9B) { return "SBB E"; }
        else if constexpr (opcode == 0x9C) { return "SBB H"; }
        else if constexpr (opcode == 0x9D) { return "SBB L"; }
        else if constexpr (opcode == 0x9E) { return "SBB M"; }
        else if constexpr (opcode == 0x9F) { return "SBB A"; }
        else if constexpr (opcode == 0xA0) { return "ANA B"; }
        else if constexpr (opcode == 0xA1) { return "ANA C"; }
        else if constexpr (opcode == 0xA2) { return "ANA D"; }
        else if constexpr (opcode == 0xA3) { return "ANA E"; }
        else if constexpr (opcode == 0xA4) { return "ANA H"; }
        else if constexpr (opcode == 0xA5) { return "ANA L"; }
        else if constexpr (opcode == 0xA6) { return "ANA M"; }
        else if constexpr (opcode == 0xA7) { return "ANA A"; }
        else if constexpr (opcode == 0xA8) { return "XRA B"; }
        else if constexpr (opcode == 0xA9) { return "XRA C"; }
        else if constexpr (opcode == 0xAA) { return "XRA D"; }
        else if constexpr (opcode == 0xAB) { return "XRA E"; }
        else if constexpr (opcode == 0xAC) { return "XRA H"; }
        else if constexpr (opcode == 0xAD) { return "XRA L"; }
        else if constexpr (opcode == 0xAE) { return "XRA M"; }
        else if constexpr (opcode == 0xAF) { return "XRA A"; }
        else if constexpr (opcode == 0xB0) { return "ORA B"; }
        else if constexpr (opcode == 0xB1) { return "ORA C"; }
        else if constexpr (opcode == 0xB2) { return "ORA D"; }
        else if constexpr (opcode == 0xB3) { return "ORA E"; }
        else if constexpr (opcode == 0xB4) { return "ORA H"; }
        else if constexpr (opcode == 0xB5) { return "ORA L"; }
        else if constexpr (opcode == 0xB6) { return "ORA M"; }
        else if constexpr (opcode == 0xB7) { return "ORA A"; }
        else if constexpr (opcode == 0xB8) { return "CMP B"; }
        else if constexpr (opcode == 0xB9) { return "CMP C"; }
        else if constexpr (opcode == 0xBA) { return "CMP D"; }
        else if constexpr (opcode == 0xBB) { return "CMP E"; }
        else if constexpr (opcode == 0xBC) { return "CMP H"; }
        else if constexpr (opcode == 0xBD) { return "CMP L"; }
        else if constexpr (opcode == 0xBE) { return "CMP M"; }
        else if constexpr (opcode == 0xBF) { return "CMP A"; }
        else if constexpr (opcode == 0xC0) { return "RNZ"; }
        else if constexpr (opcode == 0xC1) { return "POP B"; }
        else if constexpr (opcode == 0xC2) { return "JNZ adr"; }
        else if constexpr (opcode == 0xC3) { return "JMP adr"; }
        else if constexpr (opcode == 0xC4) { return "CNZ adr"; }
        else if constexpr (opcode == 0xC5) { return "PUSH B"; }
        else if constexpr (opcode == 0xC6) { return "ADI D8"; }
        else if constexpr (opcode == 0xC7) { return "RST 0"; }
        else if constexpr (opcode == 0xC8) { return "RZ"; }
        else if constexpr (opcode == 0xC9) { return "RET"; }
        else if constexpr (opcode == 0xCA) { return "JZ adr"; }
        else if constexpr (opcode == 0xCB) { return "JMP adr"; }
        else if constexpr (opcode == 0xCC) { return "CZ adr"; }
        else if constexpr (opcode == 0xCD) { return "CALL adr"; }
        else if constexpr (opcode == 0xCE) { return "ACI D8"; }
        else if constexpr (opcode == 0xCF) { return "RST 1"; }
        else if constexpr (opcode == 0xD0) { return "RNC"; }
        else if constexpr (opcode == 0xD1) { return "POP D"; }
        else if constexpr (opcode == 0xD2) { return "JNC adr"; }
        else if constexpr (opcode == 0xD3) { return "OUT D8"; }
        else if constexpr (opcode == 0xD4) { return "CNC adr"; }
        else if constexpr (opcode == 0xD5) { return "PUSH D"; }
        else if constexpr (opcode == 0xD6) { return "SUI D8"; }
        else if constexpr (opcode == 0xD7) { return "RST 2"; }
        else if constexpr (opcode == 0xD8) { return "RC"; }
        else if constexpr (opcode == 0xD9) { return "RET"; }
        else if constexpr (opcode == 0xDA) { return "JC adr"; }
        else if constexpr (opcode == 0xDB) { return "IN D8"; }
        else if constexpr (opcode == 0xDC) { return "CC adr"; }
        else if constexpr (opcode == 0xDE) { return "SBI D8"; }
        else if constexpr (opcode == 0xDF) { return "RST 3"; }
        else if constexpr (opcode == 0xE0) { return "RPO"; }
        else if constexpr (opcode == 0xE1) { return "POP H"; }
        else if constexpr (opcode == 0xE2) { return "JPO adr"; }
        else if constexpr (opcode == 0xE3) { return "XTHL"; }
        else if constexpr (opcode == 0xE4) { return "CPO adr"; }
        else if constexpr (opcode == 0xE5) { return "PUSH H"; }
        else if constexpr (opcode == 0xE6) { return "ANI D8"; }
        else if constexpr (opcode == 0xE7) { return "RST 4"; }
        else if constexpr (opcode == 0xE8) { return "RPE"; }
        else if constexpr (opcode == 0xE9) { return "PCHL"; }
        else if constexpr (opcode == 0xEA) { return "JPE adr"; }
        else if constexpr (opcode == 0xEB) { return "XCHG"; }
        else if constexpr (opcode == 0xEC) { return "CPE adr"; }
        else if constexpr (opcode == 0xEE) { return "XRI D8"; }
        else if constexpr (opcode == 0xEF) { return "RST 5"; }
        else if constexpr (opcode == 0xF0) { return "RP"; }
        else if constexpr (opcode == 0xF1) { return "POP PSW"; }
        else if constexpr (opcode == 0xF2) { return "JP adr"; }
        else if constexpr (opcode == 0xF3) { return "DI"; }
        else if constexpr (opcode == 0xF4) { return "CP adr"; }
        else if constexpr (opcode == 0xF5) { return "PUSH PSW"; }
        else if constexpr (opcode == 0xF6) { return "ORI D8"; }
        else if constexpr (opcode == 0xF7) { return "RST 6"; }
        else if constexpr (opcode == 0xF8) { return "RM"; }
        else if constexpr (opcode == 0xF9) { return "SPHL"; }
        else if constexpr (opcode == 0xFA) { return "JM adr"; }
        else if constexpr (opcode == 0xFB) { return "EI"; }
        else if constexpr (opcode == 0xFC) { return "CM adr"; }
        else if constexpr (opcode == 0xFE) { return "CPI D8"; }
        else if constexpr (opcode == 0xFF) { return "RST 7"; }
        else { static_assert(false, "Unknown template parameter opcode."); }
    }
};

#endif